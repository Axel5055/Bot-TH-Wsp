// traductor.js
require('dotenv').config();
const consola = require("consola");
const OpenAI = require("openai");
const sony = require("../bot/client"); // Ajusta la ruta seg√∫n tu proyecto

const BOT_NAME = "Sony";
const PREFIX_RESPONSE = `ü¶ä *${BOT_NAME}* ü¶ä`;

// Mapeo de emojis de bandera a c√≥digo de idioma ISO
const FLAG_LANG = {
    "üá¶üá´": "fa", // Afganist√°n - Persa/Dari
    "üá¶üá±": "sq", // Albania
    "üá©üáø": "ar", // Argelia
    "üá¶üá∏": "sm", // Samoa Americana
    "üá¶üá©": "ca", // Andorra - Catal√°n
    "üá¶üá¥": "pt", // Angola
    "üá¶üá¨": "en", // Antigua y Barbuda
    "üá¶üáÆ": "en", // Anguila
    "üá¶üá∑": "es", // Argentina
    "üá¶üá≤": "hy", // Armenia
    "üá¶üá∫": "en", // Australia
    "üá¶üáπ": "de", // Austria
    "üáßüá∏": "en", // Bahamas
    "üáßüá≠": "ar", // Bahr√©in
    "üáßüá©": "bn", // Banglad√©s
    "üáßüáß": "en", // Barbados
    "üáßüáæ": "be", // Bielorrusia
    "üáßüá™": "nl", // B√©lgica (neerland√©s)
    "üáßüáø": "es", // Belice
    "üáßüáØ": "fr", // Ben√≠n
    "üáßüá≤": "en", // Bermudas
    "üáßüáπ": "dz", // But√°n
    "üáßüá¥": "es", // Bolivia
    "üáßüá∑": "pt", // Brasil
    "üáßüá¨": "bg", // Bulgaria
    "üá®üá´": "fr", // Rep√∫blica Centroafricana
    "üá®üá¥": "es", // Colombia
    "üá®üá∑": "es", // Costa Rica
    "üá≠üá∑": "hr", // Croacia
    "üá®üá∫": "es", // Cuba
    "üá®üáæ": "el", // Chipre
    "üá®üáø": "cs", // Rep√∫blica Checa
    "üá©üá∞": "da", // Dinamarca
    "üá©üáØ": "fr", // Yibuti
    "üá©üá≤": "en", // Dominica
    "üá©üá¥": "es", // Rep√∫blica Dominicana
    "üá™üá®": "es", // Ecuador
    "üá™üá¨": "ar", // Egipto
    "üá∏üáª": "es", // El Salvador
    "üá™üá∑": "ti", // Eritrea
    "üá™üá™": "et", // Estonia
    "üá™üáπ": "am", // Etiop√≠a
    "üá´üáØ": "en", // Fiyi
    "üá´üáÆ": "fi", // Finlandia
    "üá´üá∑": "fr", // Francia
    "üá¨üá¶": "fr", // Gab√≥n
    "üá¨üá≤": "en", // Gambia
    "üá¨üá™": "ka", // Georgia
    "üá©üá™": "de", // Alemania
    "üá¨üá≠": "en", // Ghana
    "üá¨üá∑": "el", // Grecia
    "üá¨üá©": "en", // Granada
    "üá¨üáπ": "es", // Guatemala
    "üá¨üá≥": "fr", // Guinea
    "üá¨üáº": "pt", // Guinea-Bis√°u
    "üá¨üáæ": "en", // Guyana
    "üá≠üáπ": "ht", // Hait√≠
    "üá≠üá≥": "es", // Honduras
    "üá≠üá∫": "hu", // Hungr√≠a
    "üáÆüá∏": "is", // Islandia
    "üáÆüá≥": "hi", // India
    "üáÆüá©": "id", // Indonesia
    "üáÆüá™": "en", // Irlanda
    "üáÆüá±": "he", // Israel
    "üáÆüáπ": "it", // Italia
    "üáØüá≤": "en", // Jamaica
    "üáØüáµ": "ja", // Jap√≥n
    "üáØüá¥": "ar", // Jordania
    "üá∞üáø": "kk", // Kazajist√°n
    "üá∞üá™": "sw", // Kenia
    "üá∞üáº": "ar", // Kuwait
    "üá∞üá¨": "ky", // Kirguist√°n
    "üá±üá¶": "lo", // Laos
    "üá±üáª": "lv", // Letonia
    "üá±üáß": "ar", // L√≠bano
    "üá±üá∏": "en", // Lesoto
    "üá±üá∑": "en", // Liberia
    "üá±üáπ": "lt", // Lituania
    "üá±üá∫": "fr", // Luxemburgo
    "üá≤üá∞": "mk", // Macedonia del Norte
    "üá≤üá¨": "mg", // Madagascar
    "üá≤üáº": "en", // Malaui
    "üá≤üáæ": "ms", // Malasia
    "üá≤üáª": "dv", // Maldivas
    "üá≤üá±": "fr", // Mal√≠
    "üá≤üáπ": "mt", // Malta
    "üá≤üá∑": "ar", // Mauritania
    "üá≤üá∫": "en", // Mauricio
    "üá≤üáΩ": "es", // M√©xico
    "üá´üá≤": "en", // Micronesia
    "üá≤üá©": "ro", // Moldavia
    "üá≤üá®": "fr", // M√≥naco
    "üá≤üá≥": "mn", // Mongolia
    "üá≤üá™": "sr", // Montenegro
    "üá≤üá¶": "ar", // Marruecos
    "üá≤üáø": "pt", // Mozambique
    "üá≤üá≤": "my", // Myanmar
    "üá≥üá¶": "en", // Namibia
    "üá≥üá∑": "na", // Nauru
    "üá≥üáµ": "ne", // Nepal
    "üá≥üá±": "nl", // Pa√≠ses Bajos
    "üá≥üáø": "en", // Nueva Zelanda
    "üá≥üáÆ": "es", // Nicaragua
    "üá≥üá™": "fr", // N√≠ger
    "üá≥üá¨": "en", // Nigeria
    "üá∞üáµ": "ko", // Corea del Norte
    "üá≥üá¥": "no", // Noruega
    "üá¥üá≤": "ar", // Om√°n
    "üáµüá∞": "ur", // Pakist√°n
    "üáµüáº": "en", // Palaos
    "üáµüá¶": "es", // Panam√°
    "üáµüá¨": "en", // Pap√∫a Nueva Guinea
    "üáµüáæ": "es", // Paraguay
    "üáµüá™": "es", // Per√∫
    "üáµüá≠": "fil", // Filipinas
    "üáµüá±": "pl", // Polonia
    "üáµüáπ": "pt", // Portugal
    "üá∂üá¶": "ar", // Qatar
    "üá∑üá¥": "ro", // Ruman√≠a
    "üá∑üá∫": "ru", // Rusia
    "üá∑üáº": "rw", // Ruanda
    "üá∞üá≥": "en", // San Crist√≥bal y Nieves
    "üá±üá®": "en", // Santa Luc√≠a
    "üáªüá®": "en", // San Vicente y las Granadinas
    "üáºüá∏": "sm", // Samoa
    "üá∏üá≤": "it", // San Marino
    "üá∏üáπ": "pt", // Santo Tom√© y Pr√≠ncipe
    "üá∏üá¶": "ar", // Arabia Saudita
    "üá∏üá≥": "fr", // Senegal
    "üá∑üá∏": "sr", // Serbia
    "üá∏üá®": "fr", // Seychelles
    "üá∏üá±": "en", // Sierra Leona
    "üá∏üá¨": "en", // Singapur
    "üá∏üá∞": "sk", // Eslovaquia
    "üá∏üáÆ": "sl", // Eslovenia
    "üá∏üáß": "en", // Islas Salom√≥n
    "üá∏üá¥": "so", // Somalia
    "üáøüá¶": "af", // Sud√°frica
    "üá∞üá∑": "ko", // Corea del Sur
    "üá∏üá∏": "en", // Sud√°n del Sur
    "üá™üá∏": "es", // Espa√±a
    "üá±üá∞": "si", // Sri Lanka
    "üá∏üá©": "ar", // Sud√°n
    "üá∏üá∑": "nl", // Surinam
    "üá∏üá™": "sv", // Suecia
    "üá®üá≠": "de", // Suiza
    "üá∏üáæ": "ar", // Siria
    "üáπüáº": "zh", // Taiw√°n
    "üáπüáØ": "tg", // Tayikist√°n
    "üáπüáø": "sw", // Tanzania
    "üáπüá≠": "th", // Tailandia
    "üáπüá±": "pt", // Timor Oriental
    "üáπüá¨": "fr", // Togo
    "üáπüá∞": "tk", // Tokelau
    "üáπüá¥": "en", // Tonga
    "üáπüáπ": "en", // Trinidad y Tobago
    "üáπüá≥": "ar", // T√∫nez
    "üáπüá∑": "tr", // Turqu√≠a
    "üáπüá≤": "tk", // Turkmenist√°n
    "üáπüáª": "en", // Tuvalu
};

// Inicializar OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üîß Funci√≥n para traducir a cualquier idioma
async function traducir(texto, idioma) {
    try {
        const completion = await openai.chat.completions.create({
            model: "gpt-4.1",
            messages: [
                { role: "system", content: `Eres un traductor profesional. Traduce el texto al idioma ${idioma} sin agregar nada m√°s.` },
                { role: "user", content: `Traduce este texto al idioma ${idioma}: "${texto}"` }
            ],
            temperature: 0.2
        });
        return completion.choices[0]?.message?.content?.trim() || null;
    } catch (error) {
        consola.error("‚ùå Error al traducir:", error);
        return null;
    }
}

// üîß Funci√≥n para manejar cualquier reacci√≥n
async function manejarReaccion(reaction) {
    try {
        console.log("üîî Entr√≥ a manejarReaccion");
        console.log("üö® Reacci√≥n detectada:", reaction);

        const emoji = reaction.reaction; // emoji de la reacci√≥n
        const idioma = FLAG_LANG[emoji];

        if (!idioma) {
            console.log(`‚ö†Ô∏è Emoji ${emoji} no est√° mapeado a un idioma, se ignora`);
            return;
        }

        // Obtener el mensaje usando msgId._serialized
        const message = await sony.getMessageById(reaction.msgId._serialized);
        if (!message?.body) {
            console.log("‚ùå No se pudo obtener el mensaje o est√° vac√≠o");
            return;
        }

        console.log(`‚úèÔ∏è Traduciendo mensaje al idioma ${idioma}:`, message.body);

        const traduccion = await traducir(message.body, idioma);
        if (!traduccion) {
            console.log("‚ùå Traducci√≥n fall√≥ o no se obtuvo texto");
            return;
        }

        // Enviar la traducci√≥n como respuesta al mensaje original
        await sony.sendMessage(
            message.id.remote,
            `${traduccion}`,
            { quotedMessageId: message.id._serialized }
        );

        consola.success(`‚úÖ Traducci√≥n enviada correctamente al idioma ${idioma}`);

    } catch (error) {
        consola.error("üî• Error en manejarReaccion:", error);
    }
}

// üåê Inicializar m√≥dulo
function traductor() {
    if (global.traductorInitialized) return;
    global.traductorInitialized = true;

    consola.info("üîÑ Traductor de reacciones inicializado.");

    // Escuchar cualquier reacci√≥n
    sony.on("message_reaction", manejarReaccion);

    process.on('unhandledRejection', (reason) => consola.error('‚ùå Rechazo no manejado:', reason));
}

module.exports = traductor;
